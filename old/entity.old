import pygame

from enum import Enum
from spritesheetold import Spritesheet

class TypeMoving(Enum):
    KEY = 'key'
    RANDOM = 'random'
    PATH = 'path'

class Entity:
    def __init__(self, x, y, type_moving: TypeMoving, actor: str = 'player'):
        self.x = x
        self.y = y
        self.type_moving = type_moving
        self.actor = actor
        self.running = True
        self.action = "idle"
        self.direction = "down"
        self.index = 0
        self.last_update = pygame.time.get_ticks()
        self.interval = 100
        self.sprite = None
        my_spritesheet = Spritesheet(self.actor, self.action)
        self.sprite = my_spritesheet.list_all_sprites(self.direction)

    def update(self,  screen):
        ################################# CHECK PLAYER INPUT #################################
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_DOWN:
                    self.action = "run"
                    self.direction = "down"
                    self.y += 1
                if event.key == pygame.K_LEFT:
                    self.action = "run"
                    self.direction = "left"
                    self.x = self.x - 1
                if event.key == pygame.K_RIGHT:
                    self.action = "run"
                    self.direction = "right"
                    self.x = self.x + 1
                if event.key == pygame.K_UP:
                    self.action = "run"
                    self.direction = "up"
                    self.y = self.y - 1
                my_spritesheet = Spritesheet(self.actor, self.action)
                self.sprite = my_spritesheet.list_all_sprites(self.direction)
                self.index = 0
            else:
                self.action = "idle"

                my_spritesheet = Spritesheet(self.actor, self.action)
                self.sprite = my_spritesheet.list_all_sprites(self.direction)
                self.index = 0

        current_time = pygame.time.get_ticks()
        if current_time - self.last_update > self.interval:
            self.index = (self.index + 1) % len(self.sprite)
            self.last_update = current_time

        ################################# UPDATE WINDOW AND DISPLAY #################################
        return self.sprite